(()=>{"use strict";document.addEventListener("DOMContentLoaded",(()=>{class e{static activationInfo(){console.info("ThemeChecker activated!")}constructor(){this.DARK_THEME_CLASS="dark-theme"}setDarkMode=()=>{try{document.body.classList.add(this.DARK_THEME_CLASS)}catch(e){this.handleThemeError("An error occurred while setting dark mode:",e)}};setLightMode=()=>{try{document.body.classList.remove(this.DARK_THEME_CLASS)}catch(e){this.handleThemeError("An error occurred while setting light mode:",e)}};toggleThemeBasedOnPreference=e=>{e?this.setDarkMode():this.setLightMode()};async checkAndSetThemePreference(){try{const e=this.debounce(this.toggleThemeBasedOnPreference,250);if(window.matchMedia){const t=window.matchMedia("(prefers-color-scheme: dark)");e(t.matches),t.addEventListener("change",(t=>{e(t.matches)}))}else console.error("matchMedia is not supported. Theme preference may not work.")}catch(e){this.handleThemeError("An error occurred while checking theme preference:",e)}}handleThemeError=(e,t)=>{console.error(e,t)};debounce=(e,t)=>{let r=null;return(...c)=>{clearTimeout(r),r=setTimeout((()=>{e.apply(this,c)}),t)}}}const t=new e;!async function(){await t.checkAndSetThemePreference()}(),e.activationInfo()}))})();